genre_counts <- similar_games %>%
summarise(across(starts_with("Genre"), ~ sum(.x))) %>%
pivot_longer(everything(), names_to = "Genre", values_to = "Count")
library(tidyr)
library(dplyr)
library(ggplot2)
library(plotly)
games <- read.csv("C:\\Users\\Komputer\\interactive-dashboard\\steam-games-dataset\\clustered_games.csv")
games$X.1<-NULL
games$X<-NULL
chosen_game="Terraria"
cluster_value <- games %>% filter(QueryName == chosen_game) %>% pull(cluster)
similar_games <- games %>% filter(cluster == cluster_value)
similar_games <- similar_games %>% filter(QueryName != chosen_game)
genre_counts <- similar_games %>%
summarise(across(starts_with("Genre"), ~ sum(.x))) %>%
pivot_longer(everything(), names_to = "Genre", values_to = "Count")
genre_counts <- similar_games %>%
mutate(across(starts_with("Genre"), ~ .x == "True")) %>%
summarise(across(starts_with("Genre"), ~ sum(.x))) %>%
pivot_longer(everything(), names_to = "Genre", values_to = "Count")
View(genre_counts)
genre_counts <- genre_counts %>%
filter(Genre != "GenreIsAll")
ggplot(genre_counts, aes(x = Genre, y = Count)) +
geom_col() +
labs(title = "Histogram of Genre Counts", x = "Genre", y = "Count")
ggplot(genre_counts, aes(x = Count, y = Genre)) +
geom_col() +
labs(title = "Histogram of Genre Counts", x = "Genre", y = "Count")
genre_counts <- genre_counts %>%
arange(desc(Count))
genre_counts <- genre_counts %>%
arange(desc(Count))
genre_counts <- genre_counts %>%
arrange(desc(Count))
ggplot(genre_counts, aes(x = Count, y = Genre)) +
geom_col() +
labs(title = "Histogram of Genre Counts", x = "Genre", y = "Count")
genre_counts <- genre_counts %>%
arrange(desc(Count))
ggplot(genre_counts, aes(x = Count, y = Genre)) +
geom_col() +
labs(title = "Histogram of Genre Counts", x = "Genre", y = "Count")
genre_counts <- genre_counts %>%
arrange(desc(Count))
ggplot(genre_counts, aes(x = Count, y = Genre)) +
geom_col() +
labs(title = "Histogram of Genre Counts", x = "Genre", y = "Count")
genre_counts %>%
arrange(desc(Count)) %>%
ggplot(aes(x = Count, y = Genre)) +
geom_col() +
labs(title = "Histogram of Genre Counts", x = "Genre", y = "Count")
library(tidyr)
library(dplyr)
library(ggplot2)
library(plotly)
games <- read.csv("C:\\Users\\Komputer\\interactive-dashboard\\steam-games-dataset\\clustered_games.csv")
games$X.1<-NULL
games$X<-NULL
chosen_game="Terraria"
cluster_value <- games %>% filter(QueryName == chosen_game) %>% pull(cluster)
similar_games <- games %>% filter(cluster == cluster_value)
similar_games <- similar_games %>% filter(QueryName != chosen_game)
genre_counts <- similar_games %>%
mutate(across(starts_with("Genre"), ~ .x == "True")) %>%
summarise(across(starts_with("Genre"), ~ sum(.x))) %>%
pivot_longer(everything(), names_to = "Genre", values_to = "Count")
genre_counts <- genre_counts %>%
filter(Genre != "GenreIsAll")
genre_counts <- genre_counts %>%
arrange(desc(Count))
ggplot(genre_counts, aes(x = Count, y = Genre)) +
geom_col() +
labs(title = "Histogram of Genre Counts", x = "Genre", y = "Count")
ggplot(genre_counts, aes(x = reorder(Count), y = Genre)) +
geom_col() +
labs(title = "Histogram of Genre Counts", x = "Genre", y = "Count")
ggplot(genre_counts, aes(x = Count, y = Genre)) +
geom_col() +
labs(title = "Histogram of Genre Counts", x = "Genre", y = "Count")
genre_counts %>%
mutate(Genre = fct_reorder(Genre, Count)) %>%
ggplot(aes(x = Count, y = Genre)) +
geom_col() +
labs(title = "Histogram of Genre Counts", x = "Genre", y = "Count")
library(forcats)
library(forcats)
install.packages("forcats")
library(forcats)
genre_counts %>%
mutate(Genre = fct_reorder(Genre, Count)) %>%
ggplot(aes(x = Count, y = Genre)) +
geom_col() +
labs(title = "Histogram of Genre Counts", x = "Genre", y = "Count")
genre_counts <- similar_games %>%
filter(QueryName == chosen_game) %>%
select(starts_with("Genre")) %>%
mutate(across(everything(), ~ .x == "True")) %>%
pivot_longer(everything(), names_to = "Genre", values_to = "Highlight") %>%
mutate(Genre = str_remove(Genre, "GenreIs")) %>%
left_join(genre_counts, by = "Genre") %>%
mutate(Color = ifelse(Highlight, "green", "gray"))
genre_counts <- genre_counts %>%
filter(Genre != "GenreIsAll")
genre_counts <- similar_games %>%
filter(QueryName == chosen_game) %>%
select(starts_with("Genre")) %>%
mutate(across(everything(), ~ .x == "True")) %>%
pivot_longer(everything(), names_to = "Genre", values_to = "Highlight") %>%
left_join(genre_counts, by = "Genre") %>%
mutate(Color = ifelse(Highlight, "green", "gray"))
genre_counts <- similar_games %>%
mutate(across(starts_with("Genre"), ~ .x == "True")) %>%
summarise(across(starts_with("Genre"), ~ sum(.x))) %>%
pivot_longer(everything(), names_to = "Genre", values_to = "Count")
game_number=which(similar_games$RequestName == chosen_game)
game_number=which(similar_games$RequestName == chosen_game)
genre_counts$Colors <- similar_games[game_number,] %>%
mutate(across(starts_with("Genre"), .x =="True"))
similar_games[game_number,] %>% starts_with("Genre")
similar_games[game_number,] %>% starts_with("Genre")
similar_games[game_number,] %>% select(tarts_with("Genre"))
select(starts_with("Genre")) %>% slice(game_number)
similar_games %>% select(starts_with("Genre")) %>% slice(game_number)
temp_data<-similar_games %>% select(starts_with("Genre")) %>% slice(game_number)
View(temp_data)
game_number=which(similar_games$RequestName == chosen_game)
game_number=which(similar_games$QueryName == chosen_game)
temp_data<-similar_games %>% select(starts_with("Genre")) %>% slice(game_number)
game_number=which(similar_games$QueryName == chosen_game)
game_number=which(similar_games$QueryName == chosen_game)
game_number=which(similar_games$QueryName == chosen_game)
game_number=which(similar_games$QueryName == chosen_game)
which(similar_games$QueryName == chosen_game)
game_number<-which(similar_games$QueryName == chosen_game)
game_number<-which(similar_games$QueryName == chosen_game)
library(tidyr)
library(dplyr)
library(ggplot2)
library(plotly)
library(forcats)
games <- read.csv("C:\\Users\\Komputer\\interactive-dashboard\\steam-games-dataset\\clustered_games.csv")
games$X.1<-NULL
games$X<-NULL
chosen_game="Terraria"
cluster_value <- games %>% filter(QueryName == chosen_game) %>% pull(cluster)
similar_games <- games %>% filter(cluster == cluster_value)
game_number<-which(similar_games$QueryName == chosen_game)
similar_games <- similar_games %>% filter(QueryName != chosen_game)
genre_counts <- similar_games %>%
mutate(across(starts_with("Genre"), ~ .x == "True")) %>%
summarise(across(starts_with("Genre"), ~ sum(.x))) %>%
pivot_longer(everything(), names_to = "Genre", values_to = "Count")
temp_data<-similar_games %>% select(starts_with("Genre")) %>% slice(game_number)
View(temp_data)
temp_data<-temp_data %>%
mutate(across(everything(), ~ ifelse(.x, "Green", "Grey"))) %>%
similar_games %>% select(starts_with("Genre")) %>% slice(game_number)
temp_data<-similar_games %>% select(starts_with("Genre")) %>% slice(game_number)
temp_data<- temp_data %>% mutate(across(everything(), ~ ifelse(.x, "Green", "Grey")))
temp_data <- temp_data %>% gather(key = "Genre", value = "Color")
genre_counts <- join(genre_counts, temp_data, by="Genre")
genre_counts <- left_join(genre_counts, temp_data, by="Genre")
genre_counts %>%
mutate(Genre = fct_reorder(Genre, Count)) %>%
ggplot(aes(x = Count, y = Genre, color="Color")) +
geom_col() +
labs(title = "Histogram of Genre Counts", x = "Genre", y = "Count")
temp_data <-similar_games %>% select(starts_with("Genre")) %>% slice(game_number)
temp_data <- temp_data %>% mutate(across(everything(), ~ ifelse(.x, "green", "gray")))
temp_data <- temp_data %>% gather(key = "Genre", value = "Color")
genre_counts <- left_join(genre_counts, temp_data, by="Genre")
genre_counts <- genre_counts %>%
filter(Genre != "GenreIsAll")
genre_counts <- genre_counts %>%
arrange(desc(Count))
genre_counts %>%
mutate(Genre = fct_reorder(Genre, Count)) %>%
ggplot(aes(x = Count, y = Genre)) +
geom_col() +
labs(title = "Histogram of Genre Counts", x = "Genre", y = "Count")
genre_counts %>%
mutate(Genre = fct_reorder(Genre, Count)) %>%
ggplot(aes(x = Count, y = Genre, fill=Color)) +
geom_col() +
labs(title = "Histogram of Genre Counts", x = "Genre", y = "Count")
library(tidyr)
library(dplyr)
library(ggplot2)
library(plotly)
library(forcats)
games <- read.csv("C:\\Users\\Komputer\\interactive-dashboard\\steam-games-dataset\\clustered_games.csv")
games$X.1<-NULL
games$X<-NULL
chosen_game="Terraria"
cluster_value <- games %>% filter(QueryName == chosen_game) %>% pull(cluster)
similar_games <- games %>% filter(cluster == cluster_value)
game_number<-which(similar_games$QueryName == chosen_game)
similar_games <- similar_games %>% filter(QueryName != chosen_game)
genre_counts <- similar_games %>%
mutate(across(starts_with("Genre"), ~ .x == "True")) %>%
summarise(across(starts_with("Genre"), ~ sum(.x))) %>%
pivot_longer(everything(), names_to = "Genre", values_to = "Count")
temp_data <-similar_games %>% select(starts_with("Genre")) %>% slice(game_number)
temp_data <- temp_data %>% mutate(across(everything(), ~ ifelse(.x, "green", "grey")))
temp_data <- temp_data %>% gather(key = "Genre", value = "Color")
genre_counts <- left_join(genre_counts, temp_data, by="Genre")
genre_counts <- genre_counts %>%
filter(Genre != "GenreIsAll")
genre_counts <- genre_counts %>%
arrange(desc(Count))
genre_counts %>%
mutate(Genre = fct_reorder(Genre, Count)) %>%
ggplot(aes(x = Count, y = Genre, fill=Color)) +
geom_col() +
labs(title = "Histogram of Genre Counts", x = "Genre", y = "Count")
shiny::runApp()
shiny::runApp()
library(tidyr)
library(dplyr)
library(ggplot2)
library(plotly)
library(forcats)
library(gridExtra)
library(circlize)
library(stringr)
games <- read.csv("C:\\Users\\Komputer\\interactive-dashboard\\steam-games-dataset\\clustered_games.csv")
games$X.1<-NULL
games$X<-NULL
chosen_game="Terraria"
cluster_value <- games %>% filter(QueryName == chosen_game) %>% pull(cluster)
similar_games <- games %>% filter(cluster == cluster_value)
game_number<-which(similar_games$QueryName == chosen_game)
similar_games <- similar_games %>% filter(QueryName != chosen_game)
################################Network diagram#################################
# Create a co-occurrence matrix
#devtools::install_github("mattflor/chorddiag")
library(chorddiag)
# Load the data
game_genres <- games %>%
select(starts_with("Genre")) %>%
mutate_all(~ifelse(. == "True", 1, 0))
game_genres$GenreIsAll=NULL
game_genres<-game_genres %>% rename_with(~str_remove(., "GenreIs"))
# Calculate the co-occurrence matrix
game_genres <- as.matrix(game_genres)
co_occur <- t(game_genres) %*% game_genres
diag(co_occur) <- 0
my_colors <- c("#a6cee3",
"#1f78b4",
"#b2df8a",
"#33a02c",
"#fb9a99",
"#e31a1c",
"#fdbf6f",
"#ff7f00",
"#cab2d6",
"#6a3d9a",
"#ffff99",
"#b15928")
# Create an interactive chord diagram
chorddiag(co_occur,  groupColors = my_colors)
chorddiag(co_occur)
